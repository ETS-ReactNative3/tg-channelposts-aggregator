version: '3.7'

services:
  drone-server:
    image: drone/drone:1.2.1
    ports:
      - 8088:80/tcp
    volumes:
      - /var/swarm/drone/server/sqlite-data:/var/lib/drone:rw
      - /var/swarm/drone/server/config:/config:ro
      # https://docs.docker.com/storage/bind-mounts/
    logging:
      driver: json-file
      options:
        max-size: '5m'
        max-file: '3'
    # depends_on:
    #   - traefik
    env_file:
      - /var/swarm/drone/server/config/.env.drone.server
    networks:
      - drone
      - drone_ci
    deploy:
      # Switching to dnsrr, to use an external load balancer without the routing mesh:
      # https://docs.docker.com/engine/swarm/ingress/#without-the-routing-mesh
      # endpoint_mode: dnsrr # drone-server:8088
      labels:
        # network
        - 'traefik.enable=true'
        - 'traefik.docker.network=drone'

        # routers
        - 'traefik.http.routers.drone.rule=Host(`$DRONE_SERVER_HOST`)'
        - 'traefik.http.routers.drone.entrypoints=drone_entry'
        - 'traefik.http.routers.drone.tls=true'
        - 'traefik.http.routers.drone.tls.certresolver=mycert'
        - 'traefik.http.routers.drone.middlewares=https_redirect'

        # middlewares
        - 'traefik.http.middlewares.https_redirect.redirectscheme.scheme=https'
        - 'traefik.http.middlewares.https_redirect.redirectscheme.permanent=true'

        # services
        - 'traefik.http.services.drone-server.loadbalancer.server.port=$DRONE_SERVER_PORT'

      # placement:
      # constraints:
      #   - node.role != manager
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        order: start-first
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  drone-agent:
    image: drone/agent:1.2.1
    command: agent
    logging:
      driver: json-file
      options:
        max-size: '5m'
        max-file: '3'
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/swarm/drone/agent/data:/data:rw
      - /var/swarm/drone/agent/config:/config:ro
    env_file:
      - /var/swarm/drone/agent/config/.env.drone.agent
    networks:
      - drone_ci
    deploy:
      placement:
        # constraints:
        #   - node.role != manager
        preferences:
          - spread: node.labels.drone_ci
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        order: start-first
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # global routing server & dashboard configuration / reverse proxy
  # https://github.com/cbirkenbeul/docker-homelab/tree/master/traefik
  # TODO: docker network create traefik_proxy
  traefik-svc:
    image: traefik:v2.1.4
    command:
      - '--configFile=/etc/traefik/config/traefik.toml' # read it from the mounted volume
      # - "--certificatesResolvers.mycert.acme.dnsChallenge=true"
    ports:
      - '80:80/tcp'
      - '443:443/tcp'
      - '8080:8080/tcp' # backend
      - '8090:8088/tcp' # drone entry-point
      - '9000:9000/tcp' # ./server/Dockerfile.prod: pm2-runtime start server.js --web 9000
      - '9009:9009/tcp' # traefik dashboard
    networks:
      - traefik_proxy
      - microservices
      - drone
      # - drone_ci # no need to load balance that network
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
    env_file:
      - /var/swarm/traefik/.env.provider
    deploy:
      restart_policy:
        condition: on-failure
        # condition: any
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        order: start-first
        monitor: 30s
      placement:
        constraints:
          - node.role == manager
      labels:
        # network
        - 'traefik.enable=true'
        - 'traefik.docker.network=traefik_proxy'

        # routers
        - 'traefik.http.routers.api.rule=Host(`$TRAEFIK_HOST`) && PathPrefix(`/dashboard`)' # change to your domain
        - 'traefik.http.routers.api.entryPoints=dashboard'
        - 'traefik.http.routers.api.service=api@internal'
        - 'traefik.http.routers.api.tls=true'
        - 'traefik.http.routers.api.tls.certresolver=mycert'
        - 'traefik.http.routers.api.tls.domains[0].main=traefik.company.com'
        - 'traefik.http.routers.api.tls.domains[0].sans=*.company.org'
        # - 'traefik.http.routers.api.middlewares=auth'

        # services
        - 'traefik.http.services.traefik-svc.loadbalancer.server.port=$TRAEFIK_DASHBOARD_PORT'
        - 'traefik.http.services.traefik-svc.loadbalancer.server.scheme=https'
        # - 'traefik.port=`$TRAEFIK_DASHBOARD_PORT`'
        # middlewares
        # - 'traefik.http.middlewares.auth.basicauth.users=<user>/<pass>'
        # configuration example: https://docs.traefik.io/migration/v1-to-v2/
        # https://docs.traefik.io/operations/dashboard/#secure-mode
        # TODO: paste <user>/<pass> in the above line by generating with:
        # sudo apt install apache2-utils -y
        # echo $(htpasswd -nbB <USER> "<PASS>") | sed -e s/\\$/\\$\\$/g
        # You can then access the dashboard at http://traefik.example.com:9009 or at http://<Traefik IP>:9009/dashboard/
        # or just do: curl -s 127.0.0.1:9009/api/rawdata | jq .
    depends_on:
      # - backend
      # - frontend
      - drone-server
      # - drone-agent
      # - search
      # - db
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime
      - /var/swarm/traefik/acme:/etc/traefik/acme
      - /var/swarm/traefik/config:/etc/traefik/config
      - /var/swarm/traefik/logs:/logs
      # - /var/swarm/traefik/access.log:/traefik.access.log
      - /var/swarm/traefik/.htpasswd:/.htpasswd

# volumes:
#   drone-server-sqlite: {}
#   drone-agent: {}

networks:
  drone:
    driver: overlay
    external: true
    attachable: true
  drone_ci:
    driver: overlay
    external: true
    attachable: true
  traefik_proxy:
    driver: overlay
    external: true
    attachable: true
  microservices:
    driver: overlay
    external: false
    attachable: true
