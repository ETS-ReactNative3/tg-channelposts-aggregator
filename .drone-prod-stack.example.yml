version: '3.7'

services:
  drone-server:
    image: drone/drone:1.6.2
    ports:
      - target: 80
        published: 8090
        protocol: tcp
        mode: host
    volumes:
      - /var/swarm/drone/server/sqlite-data:/data:rw
      - /var/swarm/drone/server/config:/config:ro
      # https://docs.docker.com/storage/bind-mounts/
    logging:
      driver: json-file
      options:
        max-size: '5m'
        max-file: '3'
    # depends_on:
    #   - traefik
    env_file:
      - /var/swarm/drone/server/config/.env.drone.server
    environment:
      - DRONE_SERVER_HOST
      - DRONE_SERVER_PORT
    networks:
      drone:
        aliases:
          - drone-server-net
    deploy:
      labels:
        # network
        - 'traefik.enable=true'
        - 'traefik.docker.network=drone'

        # routers http
        - 'traefik.http.routers.drone_http.entrypoints=drone_server_entry'
        - 'traefik.http.routers.drone_http.rule=(Host(`${DRONE_SERVER_HOST}:${DRONE_SERVER_PORT}`) && (PathPrefix(`/authorize`) || PathPrefix(`/login`)))'
        - 'traefik.http.middlewares.drone-strip-prefix.stripPrefix.prefixes=/authorize'
        - 'traefik.http.routers.drone_http.middlewares=drone-strip-prefix@docker'
        - 'traefik.http.routers.drone_http.service=drone-server@docker'
        # - 'traefik.http.routers.drone_http.middlewares=https_redirect'
        - 'traefik.http.routers.drone_http.middlewares=drone_https_mdlwr@docker'

        # routers https
        - 'traefik.http.routers.drone_https.entrypoints=drone_server_entry'
        - 'traefik.http.routers.drone_https.rule=(Host(`${DRONE_SERVER_HOST}:${DRONE_SERVER_PORT}`) && (PathPrefix(`/authorize`) || PathPrefix(`/login`)))'
        - 'traefik.http.routers.drone_https.tls=true'
        - 'traefik.http.routers.drone_https.tls.certresolver=default'
        # - 'traefik.http.routers.drone_https.tls.certresolver=my-resolver'

        # middlewares
        - 'traefik.http.middlewares.drone_https_mdlwr.redirectscheme.scheme=https'
        # - 'traefik.http.middlewares.https_redirect.redirectscheme.scheme=https'
        # - 'traefik.http.middlewares.https_redirect.redirectscheme.permanent=true'

        # services
        - 'traefik.http.services.drone-server.loadbalancer.server.port=${DRONE_SERVER_PORT}'

      # placement:
      # constraints:
      #   - node.role != manager
      mode: replicated
      # Switching to dnsrr, to use an external load balancer without the routing mesh:
      # https://docs.docker.com/engine/swarm/ingress/#without-the-routing-mesh
      # endpoint_mode: dnsrr # drone-server:8088
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        order: start-first
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  drone-agent:
    image: drone/agent:1.6.2
    ports:
      - target: 80
        published: 8100
        protocol: tcp
        mode: host
    command: agent
    logging:
      driver: json-file
      options:
        max-size: '5m'
        max-file: '3'
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/swarm/drone/agent/data:/data:rw
      - /var/swarm/drone/agent/config:/config:ro
    env_file:
      - /var/swarm/drone/agent/config/.env.drone.agent
    environment:
      - DRONE_UI_HOST
      - DRONE_UI_PORT
    networks:
      drone_ci:
        aliases:
          - drone-agent-net
    deploy:
      labels:
        - 'traefik.enable=true'
        - 'traefik.docker.network=drone'

        # routers http
        - 'traefik.http.routers.drone_ci.entrypoints=drone_entry'
        - 'traefik.http.routers.drone_ci.rule=Host(`${DRONE_UI_HOST}:${DRONE_UI_PORT}`)'
        - 'traefik.http.services.drone-agent.loadbalancer.server.port=${DRONE_UI_PORT}'
      placement:
        # constraints:
        #   - node.role != manager
        preferences:
          - spread: node.labels.drone_ci
      mode: replicated
      # endpoint_mode: dnsrr
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        order: start-first
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # global routing server & dashboard configuration / reverse proxy
  # https://github.com/cbirkenbeul/docker-homelab/tree/master/traefik
  # TODO: docker network create traefik_proxy
  traefik-svc:
    image: traefik:v2.1.4
    command:
      - '--configFile=/etc/traefik/config/traefik.toml' # read it from the mounted volume
      # - "--certificatesResolvers.my-resolver.acme.dnsChallenge=true"
    ports:
      - '80:80/tcp'
      - '443:443/tcp'
      # - '8080:8080/tcp' # backend
      # - '8090:8090/tcp' # drone entry-point
      - '9000:9000/tcp' # ./server/Dockerfile.prod: pm2-runtime start server.js --web 9000
      - '9009:9009/tcp' # traefik dashboard
    networks:
      traefik_proxy:
        aliases:
          - traefik-net
      microservices:
        aliases:
          - microservices-net
      drone:
        aliases:
          - drone-server-net
      drone_ci:
        aliases:
          - drone-agent-net
    logging:
      driver: json-file
      options:
        max-size: '10m'
        max-file: '3'
    environment:
      - TRAEFIK_HOST
      - TRAEFIK_DASHBOARD_PORT
    env_file:
      - /var/swarm/traefik/.env.provider
    deploy:
      restart_policy:
        condition: on-failure
        # condition: any
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        order: start-first
        monitor: 30s
      placement:
        constraints:
          - node.role == manager
      labels:
        # network
        - 'traefik.enable=true'
        - 'traefik.docker.network=traefik_proxy'

        # routers http
        - 'traefik.http.routers.api.rule=(Host(`${TRAEFIK_HOST}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`)))' # change to your domain
        - 'traefik.http.routers.api.entryPoints=dashboard_entry'
        - 'traefik.http.routers.api.service=api@internal'
        - 'traefik.http.routers.api.middlewares=api_tls_mdlwr@docker'
        # - 'traefik.http.routers.api.middlewares=https_redirect'
        # http://www.htaccesstools.com/htpasswd-generator/

        # routers https
        - 'traefik.http.routers.api_tls.tls=true'
        - 'traefik.http.routers.api_tls.entryPoints=dashboard_entry'
        - 'traefik.http.routers.api_tls.rule=(Host(`${TRAEFIK_HOST}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`)))'
        - 'traefik.http.routers.api_tls.tls.certresolver=default'
        # - 'traefik.http.routers.api.tls.certresolver=my-resolver'
        # - 'traefik.http.routers.api_tls.tls.domains[0].main=traefik.company.com'
        # - 'traefik.http.routers.api.tls.domains[0].sans=*.company.org'

        # services
        - 'traefik.http.services.traefik-svc.loadbalancer.server.port=`${TRAEFIK_DASHBOARD_PORT}`'
        # - 'traefik.http.services.traefik-svc.loadbalancer.server.scheme=https'
        # - 'traefik.port=`$TRAEFIK_DASHBOARD_PORT`'

        # middlewares
        - 'traefik.http.middlewares.api_tls_mdlwr.redirectscheme.scheme=https'

        # auth
        - 'traefik.http.routers.api.middlewares=myauth'
        - 'traefik.http.middlewares.myauth.basicauth.users=admin:${TRAEFIK_ADMIN_PASSWORD}'
        # - 'traefik.http.middlewares.auth.basicauth.users=<user>/<pass>'
        # https://blog.creekorful.com/how-to-expose-traefik-2-dashboard-securely-docker-swarm/
        # configuration example: https://docs.traefik.io/migration/v1-to-v2/
        # https://docs.traefik.io/operations/dashboard/#secure-mode
        # TODO: paste <user>/<pass> in the above line by generating with:
        # sudo apt install apache2-utils -y
        # echo $(htpasswd -nbB <USER> "<PASS>") | sed -e s/\\$/\\$\\$/g
        # You can then access the dashboard at http://traefik.example.com:9009 or at http://<Traefik IP>:9009/dashboard/
        # or just do: curl -s 127.0.0.1:9009/api/rawdata | jq .
    depends_on:
      # - backend
      # - frontend
      - drone-server
      # - drone-agent
      # - search
      # - db
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime
      - /var/swarm/traefik/acme:/etc/traefik/acme
      - /var/swarm/traefik/config:/etc/traefik/config
      - /var/swarm/traefik/certs:/etc/traefik/certs
      - /var/swarm/traefik/logs:/logs
      # - /var/swarm/traefik/access.log:/traefik.access.log
      - /var/swarm/traefik/.htpasswd:/.htpasswd

# volumes:
#   drone-server-sqlite: {}
#   drone-agent: {}

networks:
  drone:
    driver: overlay
    external: true
    attachable: true
  drone_ci:
    driver: overlay
    external: true
    attachable: true
  traefik_proxy:
    driver: overlay
    external: true
    attachable: true
  microservices:
    driver: overlay
    external: false
    attachable: true
