# I'd recommend to use 'localhost' in swarm mode (production) to bind a port to the 127.0.0.1:
DRONE_SERVER_HOST=localhost:8090

# Either set the exposed port above or set the DRONE_SERVER_PORT variable below.
# However, the DRONE_SERVER_PORT variable won't work for every server.
# To validate, run 'docker service logs <your_stack>_drone-server' and look for:
# INFO[0000] starting the http server ... 'port=...'

# DRONE_SERVER_PORT=:8090

# You'll also need to set these two variables, esp. if you use swarm mode + GitHub Webhooks:
DRONE_SERVER_HOST_TRAEFIK=YOUR-IP-OR-YOUR-DNS
DRONE_SERVER_PORT_TRAEFIK=80

# concerning UI host see documentation for more info: https://docs.drone.io/server/reference/
DRONE_AGENT_HOST=YOUR_IP_OR_YOUR_DNS
DRONE_AGENT_PORT_TRAEFIK=3000
# https://docs.drone.io/runner/docker/configuration/dashboard/

# On 'connect: connection refused' error, check whether the port is open on your VPS:
# nc -vz 127.0.0.1 8090
# or: `nc -vz your-domain.com PORT` and/or:
# netstat -tulpn | grep LISTEN
# to troubleshoot Drone CI server/runner errors, look there: https://gitter.im/drone/drone

# traefik
TRAEFIK_HOST=yourdomain.com
TRAEFIK_DASHBOARD_SERVICE_PORT=PORT # e.g. 9010
TRAEFIK_AUTH_DATA=username:$apr1$8n7mcbkr$5v6dKtwz3J3ot/5xfPv3o.

# frontend
FRONTEND_HOST=yourdomain.com
SERVER_IP=YOUR_IP_OR_YOUR_DNS # is set in: ./client/src/utils/constants/index.js

# backend
BOT_TOKEN=
DB_CONNECTION_STRING=mongodb+srv://...
# paste BOT_TOKEN & DB_CONNECTION_STRING without quotes!
NODE_ENV=production

# 'cd' to a directory with your .env file is and
# apply all these environment variables by running:
# docker-compose -f drone-prod-stack.yml config > final-stack-name.yml
# then deploy:
# docker stack deploy -c final-stack-name.yml swarm-stack-name
