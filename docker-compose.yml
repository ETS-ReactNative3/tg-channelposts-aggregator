version: '3.7'

services:
  frontend:
    build:
      context: './client'
      dockerfile: Dockerfile.prod
    ports:
      - '3000:3000'
    env_file:
      - ./client/.env.production
    # deploy:
    #   replicas: 1
    #   restart_policy:
    #     condition: on-failure
    networks:
      - front
    environment:
      - DEFAULT_HOST=aggregator.localhost
      - VIRTUAL_PORT=80
      # VIRTUAL_HOST: aggregator.localhost
      # - ES_CONNECTION_URI=${ES_CONNECTION_URI}
    # extra_hosts:
    #   - 'one.mydomain.net:127.0.0.1'
    #   - 'two.mydomain.net:127.0.0.1'

  backend:
    build:
      context: './server'
      dockerfile: Dockerfile.prod
    ports:
      - '8080:8080'
    env_file:
      - ./server/.env
    networks:
      - back
    # environment:
    #   - BOT_TOKEN=${BOT_TOKEN}
    #   - DB_HOST_PREFIX=${DB_HOST_PREFIX}
    #   - DB_USER=${DB_USER}
    #   - DB_PASSWORD=${DB_PASSWORD}
    #   - DB_HOST=${DB_HOST}
    #   - DB_NAME=${DB_NAME}
    #   - DB_HOST_OPTS=${DB_HOST_OPTS}
    # depends_on:
    #  - db
    # deploy:
    #     mode: replicated
    #     replicas: 2
    #       restart_policy:
    #           condition: on-failure
    #     placement:
    #         constraints:
    #         - node.role == manager
    #   resources:
    #     limits:
    #       cpus: '0.80'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.50'
    #       memory: 256M

  #   search:
  #     build: './search'
  #     image: elasticsearch
  #     ports:
  #       - "9200:9200"
  #     ports:
  #       - '9243:9000'
  #     depends_on:
  #       - db
  #     environment:
  #       - ELASTICSEARCH_URI=

  #   db:
  #     image: mongo
  #     ports:
  #       - '27017:27017'
  #     # volumes:

  # global routing server / reverse proxy
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    ports:
      - '80:80'
      # - '443:443'
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./default.dev.conf:/etc/nginx/conf.d/frontend.conf:ro
      # - /etc/nginx/vhost.d
      # - /opt/certs:/etc/nginx/certs:ro
      # - ./web/public:/srv/www/static OR /usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    # - search
    networks:
      - front
      - back

networks:
  back:
    driver: bridge
    # internal: true
  front:
    driver: bridge
